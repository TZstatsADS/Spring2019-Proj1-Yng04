library("MASS")
hist(galaxies, xlab = "velocities of galaxies")
abline(v = mean(galaxies))
ggplot(zuni,aes(sample=Revenue))+stat_qq()
hist(galaxies, xlab = "velocities of galaxies",breaks = 100)
hist(galaxies, xlab = "velocities of galaxies",breaks = 10)
medium <- function(df){
return(median(df$`Base Salary`))
}
m <- sapply(split(salarydata,salarydata$`Agency Name`),medium)
order <- sort(m,decreasing = T)
head(names(order),10)
arrange(desc(m))
library(ggplot2)
library(ggridges)
new <- data.frame(unlist(m))
View(new)
new <- data.frame(unlist(order))
new <- data.frame(unlist(order), header = "Median Base Salary")
View(new)
new <- data.frame(unlist(order), Agency = names(order))
View(new)
ggplot(salarydata, aes(new$Agency[1:10], new$unlist.order.[1:10])) + geom_ridgeline()
ggplot(new[1:10], aes(new$Agency[1:10], new$unlist.order.[1:10])) + geom_ridgeline()
ggplot(new, aes(new$Agency[1:10], new$unlist.order.[1:10])) + geom_ridgeline()
ggplot(new[1:10,], aes(new$Agency[1:10], new$unlist.order.[1:10])) + geom_ridgeline()
??geom_ridgeline
ggplot(new[1:10,], aes(new$Agency[1:10], height = new$unlist.order.[1:10] )) + geom_ridgeline()
ggplot(new[1:10,], aes(new$Agency[1:10], new$unlist.order.[1:10],height = new$unlist.order.[1:10] )) + geom_ridgeline()
ggplot(new[1:10,], aes(new$Agency[1:10], new$unlist.order.[1:10],height = height] )) + geom_ridgeline()
ggplot(new[1:10,], aes(new$Agency[1:10], new$unlist.order.[1:10],height = height )) + geom_ridgeline()
colnames(new) <- c("Median Base Salary","Agency Name")
ggplot(new[1:10,], aes(1,new$`Agency Name`[1:10] ,height = new$`Median Base Salary`[1:10] )) + geom_ridgeline()
ggplot(new[1:10,], aes(new$`Agency Name`[1:10],1,height = new$`Median Base Salary`[1:10])) + geom_ridgeline()
ggplot(new[1:10,], aes(group = new$`Agency Name`[1:10],height = new$`Median Base Salary`[1:10])) + geom_ridgeline()
ggplot(new[1:10,], aes(x = new$`Median Base Salary`[1:10],y = new$`Agency Name`[1:10], group = new$`Agency Name`[1:10])) + geom_ridgeline()
ggplot(new[1:10,], aes(x = new$`Median Base Salary`[1:10],y = new$`Agency Name`[1:10], group = new$`Agency Name`[1:10])) + geom_density_ridges()
summarise(salarydata, median)
summarise(salarydata$`Base Salary`, median)
salarys <- salarydata %>% group_by(`Agency Name`) %>% summarize(med = median(`Base Salary`))
View(salarys)
arrange(desc(salarys))
arrange(desc(salarys$med))
desc(salarys)
sort(salarys$med, decreasing = T)
sort(salarys, decreasing = T)
ggplot(salarydata[salarydata$`Agency Name` == order[1:10]], aes(x = `Median Base Salary`,y =`Agency Name`, group = `Agency Name`)) + geom_density_ridges()
salarydata[salarydata$`Agency Name` == order[1:10]]
salarydata(salarydata$`Agency Name` == order[1:10])
salarydata$`Agency Name` == order[1:10]
salarydata[which(salarydata$`Agency Name` == order[1:10])]
ggplot(salarydata, aes(x = `Base Salary`,y =`Agency Name`, group = `Agency Name`)) + geom_density_ridges()
salarydata[which(salarydata$`Agency Name`) == order[1:10]]
salarydata[which(salarydata$`Agency Name` == order[1:10])]
s <- salarydata[which(salarydata$`Agency Name` == order[1:10])]
View(s)
medium <- function(df){
return(median(df$`Base Salary`))
}
m <- sapply(split(salarydata,salarydata$`Agency Name`),medium)
m <- sapply(split(salarydata,salarydata$`Agency Name`),medium)
order <- sort(m,decreasing = T)
head(names(order),10)
s <- salarydata[which(salarydata$`Agency Name` == order[1:10])]
salarys <- salarydata %>% group_by(`Agency Name`) %>% summarize(med = median(`Base Salary`))
desc(salarys)
sort(salarys)
sort(salarys$med)
sort(salarys$med, decreasing = T)
salarys(order(salarys$med, decreasing = T))
salarys[order(-salarys$med)]
salarys[order(-salarys$med),]
s <- salarys[order(-salarys$med),]
s[1:10]
s$`Agency Name`[1:10]
salarydata[which(salarydata$`Agency Name`== s$`Agency Name`[1:10])]
salarydata[which(salarydata$`Agency Name`== s$`Agency Name`[1:10]),]
dist <- salarydata[which(salarydata$`Agency Name`== s$`Agency Name`[1:10]),]
dist <- salarydata[which(salarydata$`Agency Name`== s$`Agency Name`[1:10]),]
salarydata[which(salarydata$`Agency Name`== s$`Agency Name`[1:10]),]
df <- salarydata[which(salarydata$`Agency Name`== s$`Agency Name`[1:10]),]
df <- data.frame()
df <- salarydata[which(salarydata$`Agency Name`== s$`Agency Name`[1:10]),]
ggplot(salarydata[which(salarydata$`Agency Name`== s$`Agency Name`[1:10]),], aes(x = `Base Salary`,y =`Agency Name`, group = `Agency Name`)) + geom_density_ridges()
df <- salarydata[which(salarydata$`Agency Name`== s$`Agency Name`[1:10]),]
ggplot(df, aes(x = `Base Salary`,y =`Agency Name`, group = `Agency Name`)) + geom_density_ridges()
ggplot(df, aes(x = `Base Salary`,y =`Agency Name`, group = `Agency Name`)) + geom_ridgeline()
density_
ggplot(df, aes(x = `Base Salary`,y =`Agency Name`, group = `Agency Name`)) + geom_density_ridges()
reorder(df, median)
reorder(df$`Agency Name`,s$med)
ggplot(df, aes(x = `Base Salary`,y =`Agency Name`, group = `Agency Name`)) + geom_density_ridges()
ggplot(df, aes(x = `Base Salary`,y =`Agency Name`, group = `Agency Name`)) + geom_density_ridges()
reorder(df$`Agency Name`,df$`Base Salary`,median)
salarys <- salarydata %>% group_by(`Agency Name`) %>% summarize(med = median(`Base Salary`))
s <- salarys[order(-salarys$med),]
s$`Agency Name`[1:10]
df <- salarydata[which(salarydata$`Agency Name`== s$`Agency Name`[1:10]),]
reorder(df$`Agency Name`,df$`Base Salary`,median)
reorder(df$`Agency Name`,-df$`Base Salary`,median)
reorder(df$`Agency Name`,-df$`Base Salary`,median)
ggplot(df, aes(x = `Base Salary`,y =`Agency Name`, group = `Agency Name`)) + geom_density_ridges()
df2 <- df[reorder(df$`Agency Name`,df$`Base Salary`,median),]
ggplot(df2, aes(x = `Base Salary`,y =`Agency Name`, group = `Agency Name`)) + geom_density_ridges()
View(df2)
df2 <- df[reorder(df$`Agency Name`,df$`Base Salary`,median),]
ggplot(df2, aes(x = `Base Salary`,y =`Agency Name`, group = `Agency Name`)) + geom_density_ridges()
View(df2)
with(ggplot(df2, aes(x = `Base Salary`,y =`Agency Name`, group = `Agency Name`)) + geom_density_ridges(),reorder(df$`Agency Name`,df$`Base Salary`,median))
with(ggplot(df, aes(x = `Base Salary`,y =`Agency Name`, group = `Agency Name`)) + geom_density_ridges(),reorder(df$`Agency Name`,df$`Base Salary`,median))
View(s)
medium <- function(df){
return(median(df$`Base Salary`))
}
m <- sapply(split(salarydata,salarydata$`Agency Name`),medium)
order <- sort(m,decreasing = T)
head(names(order),10)
salarys <- salarydata %>% group_by(`Agency Name`) %>% summarize(med = median(`Base Salary`))
s <- salarys[order(-salarys$med),]
s$`Agency Name`[1:10]
View(df)
View(df2)
View(salarydata)
View(salarydata)
df <- salarydata[which(salarydata$`Agency Name`== s$`Agency Name`[1:10]),]
View(df)
library(dplyr)
arrange(desc(salarys))
arrange(desc(salarys$med))
arrange(salarys,desc(salarys$med))
arrange(salarys,desc(salarys$med))[1:10]
a <- arrange(salarys,desc(salarys$med))
a[1:10]
a$`Agency Name`[1:10]
a
df2 <- salarydata[reorder(salarydata$`Agency Name`,salarydata$`Base Salary`,median),]
View(df2)
df2 <- salarydata[reorder(salarydata$`Agency Name`,-salarydata$`Base Salary`,median),]
View(df2)
View(df2)
View(df2)
reorder(salarydata$`Agency Name`,salarydata$`Base Salary`,median
)
reorder(salarydata$`Agency Name`,desc(salarydata$`Base Salary`),median)
reorder(salarydata$`Agency Name`,-salarydata$`Base Salary`,median)
reorder(salarydata$`Agency Name`,-salarydata$`Base Salary`)
reorder(salarydata$`Agency Name`,a$`Agency Name`)
with(ggplot(salarydata, aes(x = `Base Salary`,y =`Agency Name`, group = `Agency Name`)) + geom_density_ridges(),reorder(df$`Agency Name`,df$`Base Salary`,median))
ggplot(salarydata, aes(x = `Base Salary`,y =`Agency Name`, group = `Agency Name`)) + geom_density_ridges()
ggplot(salarydata, aes(x = `Base Salary`,y =a$`Agency Name`[1:10], group = a$`Agency Name`[1:10])) + geom_density_ridges()
ggplot(salarydata, aes(x = `Base Salary`,y =`Agency Name`, group = a$`Agency Name`)) + geom_density_ridges()+reorder(`Agency Name`,`Base Salary`,median)
ggplot(salarydata, aes(x = `Base Salary`,y =`Agency Name`, group = a$`Agency Name`)) + geom_density_ridges()+reorder(salarydata$`Agency Name`,salarydata$`Base Salary`,median)
ggplot(salarydata, aes(x = `Base Salary`,y =`Agency Name`, group = a$`Agency Name`)) + geom_density_ridges(reorder(salarydata$`Agency Name`,salarydata$`Base Salary`,median))
boxplot(CHAIN$log_virus)
plot(density(CHAIN$log_virus))
plot(density(na.omit(CHAIN$log_virus)))
boxplot(na.omit(CHAIN)$log_virus, main = "Boxplot of log_virus without 0 values", horizontal = T)
filter(salarydata,salarydata$`Agency Name` == a$`Agency Name`[1:10])
filter(salarydata,salarydata$`Agency Name` %n% a$`Agency Name`[1:10])
filter(salarydata,salarydata$`Agency Name` %in% a$`Agency Name`[1:10])
d <- filter(salarydata,salarydata$`Agency Name` %in% a$`Agency Name`[1:10])
View(d)
df <- filter(salarydata,salarydata$`Agency Name` %in% a$`Agency Name`[1:10])
ggplot(df, aes(x = `Base Salary`,y =`Agency Name`, group = `Agency Name`)) + geom_density_ridges()
ggplot(df, aes(x = `Base Salary`,y =`Agency Name`, group = `Agency Name`)) + geom_ridgelines()
ggplot(df, aes(x = `Base Salary`,y =`Agency Name`, group = `Agency Name`)) + geom_ridgeline()
ggplot(df, aes(x = `Base Salary`,y =`Agency Name`, group = `Agency Name`, height = `Base Salary`)) + geom_ridgeline()
ggplot(df, aes(x = `Base Salary`,y =`Agency Name`, group = `Agency Name`)) + geom_density_ridges()
ggplot(df, aes(x = `Base Salary`,y =`Agency Name`, group = `Agency Name`)) + geom_density_ridges() + reorder(df$`Agency Name`,df$`Base Salary`, median)
reorder(df$`Agency Name`,df$`Base Salary`, median)
reorder(df$`Agency Name`,-df$`Base Salary`, median)
df[reorder(df$`Agency Name`,-df$`Base Salary`, median)]
reorder(df$`Agency Name`,-df$`Base Salary`, median)
ggplot(df, aes(x = `Base Salary`,y =`Agency Name`, group = `Agency Name`)) + geom_density_ridges()
ggplot(df, aes(x = `Base Salary`,y =reorder(df$`Agency Name`,-df$`Base Salary`, median), group = `Agency Name`)) + geom_density_ridges()
ggplot(df, aes(x = `Base Salary`,y =reorder(df$`Agency Name`,df$`Base Salary`, median), group = `Agency Name`)) + geom_density_ridges()
ggplot(df, aes(x = `Base Salary`,y =reorder(df$`Agency Name`,df$`Base Salary`, median), group = `Agency Name`), ylab="") + geom_density_ridges()
ggplot(df, aes(x = `Base Salary`,y = reorder(df$`Agency Name`,df$`Base Salary`, median), group = `Agency Name`), ) + geom_boxplot()
ggplot(df, aes(x = `Base Salary`,y = reorder(df$`Agency Name`,df$`Base Salary`, median), group = `Agency Name`)) + geom_boxplot()
ggplot(df, aes(x = `Base Salary`,y = reorder(df$`Agency Name`,df$`Base Salary`, median), group = `Agency Name`)) + geom_density_ridges()
ggplot(df, aes(x = `Base Salary`,y = reorder(df$`Agency Name`,df$`Base Salary`, median))) + geom_boxplot()
ggplot(df, aes(x = `Base Salary`,y = reorder(df$`Agency Name`,df$`Base Salary`, median), group = `Agency Name`)) + geom_boxplot(horizontal = T)
ggplot(df, aes(y = `Base Salary`,x = reorder(df$`Agency Name`,df$`Base Salary`, median), group = `Agency Name`)) + geom_boxplot()
ggplot(df, aes(x = `Base Salary`,y = reorder(df$`Agency Name`,df$`Base Salary`, median), group = `Agency Name`)) + geom_boxplot()
ggplot(df, aes(x = `Base Salary`,y = reorder(df$`Agency Name`,df$`Base Salary`, median))) + geom_boxplot()
ggplot(df, aes(y = `Base Salary`,x = reorder(df$`Agency Name`,df$`Base Salary`, median))) + geom_boxplot() + coord_flip()
#qqnorm(zuni$Revenue)
#abline(a = mean(zuni$Revenue), b = sd(zuni$Revenue))
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
posterior <- function(n=256,theta = 1,alpha=2,beta=0.2){
samples <- rexp(n,theta)
prior <- dgamma(theta, alpha, beta)
result <- dgamma(theta,alpha+n,sum(samples)+beta)
return(result)
}
posterior(n=256)
curve(posterior,x = theta, from = 0, to = 4)
curve(x = theta,posterior, from = 0, to = 4)
curve(expr = posterior(theta), from = 0, to = 4)
x <- seq(0,4,0.01)
curve(expr = posterior(theta=x), from = 0, to = 4)
curve(expr = posterior(theta=x), from = 0, to = 4, ylim = 100)
curve(expr = posterior(theta=x), from = 0, to = 4, ylim = 2)
posterior(n=256, theta = 0)
posterior(n=256, theta = 4)
curve(expr = posterior(theta=x), from = 0, to = 4, ylim = 0.001)
posterior(n=256, theta = 4)
curve(expr = posterior(theta=x), from = 0, to = 4)
x <- seq(0.01,4,0.01)
curve(expr = posterior(theta=x), from = 0, to = 4)
x <- seq(0,4,0.01)
curve(expr = posterior(theta=x), from = 0, to = 4)
curve(expr = posterior(theta=x), from = 0.01, to = 4)
knitr::opts_chunk$set(echo = TRUE)
x <- seq(0,4,0.001)
plot(x,dexp(x,1),ylab = "p")
toyset <- c(1,2,4)
p_1 <- dexp(toyset)
plot(x,dexp(x,1),ylab = "p")
points(toyset,p,col="red")
toyset <- c(1,2,4)
p_1 <- dexp(toyset)
plot(x,dexp(x,1),ylab = "p")
points(toyset,p_1,col="red")
plot(x,dexp(x,2),ylab = "p")
toyset <- c(1,2,4)
p_1 <- dexp(toyset)
plot(x,dexp(x,1),ylab = "p")
points(toyset,p_1,col="red")
p_2 <- dexp(toyset,2)
plot(x,dexp(x,1),ylab = "p")
points(toyset,p_2,col="red")
posterior <- function(n=256,theta = 1,alpha=2,beta=0.2){
samples <- rexp(n,theta)
prior <- dgamma(theta, alpha, beta)
result <- dgamma(theta,alpha+n,sum(samples)+beta)
return(result)
}
posterior(n=256, theta = 4)
curve(expr = posterior(theta=x), from = 0.01, to = 4)
posterior(n=256, theta = 4)
curve(expr = posterior(theta=x), from = 0.01, to = 4)
curve(expr = posterior(theta=x,n=4), from = 0.01, to = 4)
curve(expr = posterior(theta=x,n=8), from = 0.01, to = 4, add = T)
curve(expr = posterior(theta=x,n=16), from = 0.01, to = 4, add = T)
curve(expr = posterior(theta=x,n=256), from = 0.01, to = 4, add = T)
curve(expr = posterior(theta=x,n=4), from = 0.01, to = 4)
curve(expr = posterior(theta=x,n=8), from = 0.01, to = 4, add = T, col = "red")
curve(expr = posterior(theta=x,n=16), from = 0.01, to = 4, add = T, col = "green")
curve(expr = posterior(theta=x,n=256), from = 0.01, to = 4, add = T, col = "blue")
library(ggplot2)
pmap(posterior(theta = x))
library(tidyverse)
pmap(posterior(theta = x))
df <- data.frame()
df$n <- c(4,8,16,256)
df <- data.frame(n = c(4,8,16,256))
View(df)
n <- c(4,8,16,256)
result <- posterior(n = n)
df <- data.framr(n,result)
df <- data.frame(n,result)
?geom_curve
theta <- seq(0.01, 4, 0.01)
result1 <- posterior(theta = theta)
result <- posterior(n = n, theta = theta)
result
result
theta
?apply(array, margin, ...)
n <- c(4,8,16,256)
theta <- seq(0.01, 4, 0.01)
for (i in 1:4){
result[i] <- posterior(n = n[i], theta = theta)
}
result <- data.frame()
for (i in 1:4){
result[,i] <- posterior(n = n[i], theta = theta)
}
result[i,] <- posterior(n = n[i], theta = theta)
for (i in 1:4){
result[i,] <- posterior(n = n[i], theta = theta)
}
View(result)
result <- data.frame(nrow = length(theta), ncol = 4)
for (i in 1:4){
result[,i] <- posterior(n = n[i], theta = theta)
}
length(theta)
result <- data.frame(nrow = length(theta), ncol = 4)
result[,1] <- posterior(n = n[1], theta = theta)
posterior(n = n[1], theta = theta)
result[1:400,1] <- posterior(n = n[1], theta = theta)
for (i in 1:4){
result[1:length(theta),i] <- posterior(n = n[i], theta = theta)
}
View(result)
result <- data.frame()
for (i in 1:4){
result[1:length(theta),i] <- posterior(n = n[i], theta = theta)
}
View(result)
View(result)
colnames(result) <- c("n=4","n=8","n=16","n=256")
View(result)
colnames(result) <- c("n="&n[1],"n=8","n=16","n=256")
colnames(result) <- c("n=4","n=8","n=16","n=256")
ggplot(theta,result)+geom_curve()
ggplot(aes(theta,result))+geom_curve()
ggplot(result, aes(theta,result))+geom_curve()
View(df)
df <- cbind(theta,result)
View(df)
ggplot(df, aes(theta,result))+geom_curve()
ggplot(df, aes(theta,`n=4`))+geom_curve()
?geom_curve
ggplot(df, aes(theta,`n=4`))+geom_curve(xend = 4, yend = Inf)
ggplot(df, aes(df$theta,df$`n=4`))+geom_curve(xend = 4, yend = Inf)
lines(df$theta,df$`n=4`)
line(df$theta,df$`n=4`)
curve(df$theta,df$`n=4`)
plot(df$theta,df$`n=4`)
plot(df$theta,df$`n=4`，lty=1)
plot(df$theta,df$`n=4`,lty=1)
for (i in 1:4){
curve(posterior(theta = x, n = n[i]), from = 0.1, to = 4, add = T)
}
for (i in 1:4){
curve(posterior(theta = x, n = n[i]), from = 0.1, to = 4)
}
for (i in 1:4){
curve(posterior(theta = x, n = n[i]), from = 0.1, to = 4, add = T)
}
for (i in 1:4){
curve(posterior(theta = x, n = n[i]), from = 0.1, to = 4, add = T, col = n[i])
}
for (i in 1:4){
curve(posterior(theta = x, n = n[i]), from = 0.1, to = 4, add = T, col = i)
}
for (i in 1:4){
curve(posterior(theta = x, n = n[i]), from = 0.1, to = 4, add = T, col = i)
}
posterior <- function(n=256,theta = 1,alpha=2,beta=0.2){
samples <- rexp(n,theta)
prior <- dgamma(theta, alpha, beta)
result <- dgamma(theta,alpha+n,sum(samples)+beta)
return(result)
}
n <- c(4,8,16,256)
theta <- seq(0.01, 4, 0.01)
result <- data.frame()
for (i in 1:4){
curve(posterior(theta = x, n = n[i]), from = 0.1, to = 4, add = T, col = i)
}
for (i in 1:4){
curve(posterior(theta = x, n = n[i]), from = 0.1, to = 4, add = T, col = i)
legend("topright", legend = c("n=4","n=8","n=16","n=256"),col = i)
}
i
for (i in 1:4){
curve(posterior(theta = x, n = n[i]), from = 0.1, to = 4, add = T, col = i)
legend("topright", legend = c("n=4","n=8","n=16","n=256"),fill = i)
}
for (i in 1:4){
curve(posterior(theta = x, n = n[i]), from = 0.1, to = 4, add = T, col = i)
legend("topright", legend = c("n=4","n=8","n=16","n=256"),col = i, lty = 1)
}
for (i in 1:4){
curve(posterior(theta = x, n = n[i]), from = 0.1, to = 4, add = T, col = i)
}
legend("topright", legend = c("n=4","n=8","n=16","n=256"),col = c(1:4), lty = 1)
for (i in 1:4){
curve(posterior(theta = x, n = n[i]), from = 0.1, to = 4, add = T, col = i)
}
legend("topright", legend = c("n=4","n=8","n=16","n=256"),col = c(1:4), lty = 1)
for (i in 1:4){
curve(posterior(theta = x, n = n[i]), from = 0.1, to = 4, add = T, col = i)
}
posterior <- function(n=256,theta = 1,alpha=2,beta=0.2){
samples <- rexp(n,theta)
prior <- dgamma(theta, alpha, beta)
result <- dgamma(theta,alpha+n,sum(samples)+beta)
return(result)
}
n <- c(4,8,16,256)
theta <- seq(0.01, 4, 0.01)
result <- data.frame()
for (i in 1:4){
curve(posterior(theta = x, n = n[i]), from = 0.1, to = 4, add = T, col = i)
}
legend("topright", legend = c("n=4","n=8","n=16","n=256"),col = c(1:4), lty = 1)
for (i in 1:4){
curve(posterior(theta = x, n = n[i]), from = 0.01, to = 4, add = T, col = i)
}
for (i in 1:4){
curve(posterior(theta = x, n = n[i]), from = 0.01, to = 4, add = T, col = i)
}
legend("topright", legend = c("n=4","n=8","n=16","n=256"),col = c(1:4), lty = 1)
for (i in 1:4){
curve(posterior(theta = x, n = n[i]), from = 0.01, to = 4, add = T, col = i)
}
legend("topright", legend = c("n=4","n=8","n=16","n=256"),col = c(1:4), lty = 1)
result <- data.frame()
for (i in 1:4){
curve(posterior(theta = x, n = n[i]), from = 0.01, to = 4, add = T, col = i)
}
legend("topright", legend = c("n=4","n=8","n=16","n=256"),col = c(1:4), lty = 1)
n <- c(4,8,16,256)
theta <- seq(0.01, 4, 0.001)
result <- data.frame()
for (i in 1:4){
curve(posterior(theta = x, n = n[i]), from = 0.01, to = 4, add = T, col = i, ylim = Inf)
}
n <- c(4,8,16,256)
theta <- seq(0.01, 4, 0.001)
result <- data.frame()
for (i in 1:4){
curve(posterior(theta = x, n = n[i]), from = 0.01, to = 4, add = T, col = i, ylim = 10000)
}
for (i in 1:4){
curve(posterior(theta = x, n = n[i]), from = 0.01, to = 4, add = T, col = i, ylim = 100)
}
for (i in 1:4){
curve(posterior(theta = x, n = n[i]), from = 0.01, to = 4, add = T, col = i)
}
legend("topright", legend = c("n=4","n=8","n=16","n=256"),col = c(1:4), lty = 1)
for (i in 1:4){
curve(posterior(theta = x, n = n[i]), from = 0.001, to = 4, add = T, col = i)
}
legend("topright", legend = c("n=4","n=8","n=16","n=256"),col = c(1:4), lty = 1)
for (i in 1:4){
curve(posterior(theta = x, n = n[i]), from = 0.01, to = 4, add = T, col = i)
}
for (i in 1:4){
curve(posterior(theta = x, n = n[i]), from = 0.01, to = 4, add = T, col = i)
}
legend("topright", legend = c("n=4","n=8","n=16","n=256"),col = c(1:4), lty = 1)
for (i in 1:4){
curve(posterior(theta = x, n = n[i]), from = 0.001, to = 4, add = T, col = i)
}
legend("topright", legend = c("n=4","n=8","n=16","n=256"),col = c(1:4), lty = 1)
for (i in 1:4){
curve(posterior(theta = x, n = n[i]), from = 0.001, to = 4, add = T, col = i)
}
legend("topright", legend = c("n=4","n=8","n=16","n=256"),col = c(1:4), lty = 1)
for (i in 1:4){
curve(posterior(theta = x, n = n[i]), from = 0.01, to = 4, add = T, col = i)
}
legend("topright", legend = c("n=4","n=8","n=16","n=256"),col = c(1:4), lty = 1)
set.seed(0)
for (i in 1:4){
curve(posterior(theta = x, n = n[i]), from = 0.01, to = 4, add = T, col = i)
}
legend("topright", legend = c("n=4","n=8","n=16","n=256"),col = c(1:4), lty = 1)
set.seed(0)
for (i in 1:4){
curve(posterior(theta = x, n = n[i]), from = 0.01, to = 4, add = T, col = i)
}
legend("topright", legend = c("n=4","n=8","n=16","n=256"),col = c(1:4), lty = 1)
posterior <- function(n=256,theta = 1,alpha=2,beta=0.2){
set.seed(0)
samples <- rexp(n,theta)
prior <- dgamma(theta, alpha, beta)
result <- dgamma(theta,alpha+n,sum(samples)+beta)
return(result)
}
n <- c(4,8,16,256)
for (i in 1:4){
curve(posterior(theta = x, n = n[i]), from = 0.01, to = 4, add = T, col = i)
}
for (i in 1:4){
curve(posterior(theta = x, n = n[i]), from = 0.01, to = 4, add = T, col = i)
}
legend("topright", legend = c("n=4","n=8","n=16","n=256"),col = c(1:4), lty = 1)
for (i in 1:4){
curve(posterior(theta = x, n = n[i]), from = 0.01, to = 4, add = T, col = i)
}
legend("topright", legend = c("n=4","n=8","n=16","n=256"),col = c(1:4), lty = 1)
set.seed(0)
posterior <- function(n=256,theta = 1,alpha=2,beta=0.2){
samples <- rexp(n,theta)
prior <- dgamma(theta, alpha, beta)
result <- dgamma(theta,alpha+n,sum(samples)+beta)
return(result)
}
n <- c(4,8,16,256)
for (i in 1:4){
curve(posterior(theta = x, n = n[i]), from = 0.01, to = 4, add = T, col = i)
}
legend("topright", legend = c("n=4","n=8","n=16","n=256"),col = c(1:4), lty = 1)
set.seed(0)
posterior <- function(n=256,theta = 1,alpha=2,beta=0.2){
samples <- rexp(n,theta)
prior <- dgamma(theta, alpha, beta)
result <- dgamma(theta,alpha+n,sum(samples)+beta)
return(result)
}
n <- c(4,8,16,256)
for (i in 1:4){
curve(posterior(theta = x, n = n[i]), from = 0.01, to = 4, add = T, col = i)
}
legend("topright", legend = c("n=4","n=8","n=16","n=256"),col = c(1:4), lty = 1)
posterior <- function(n=256,theta = 1,alpha=2,beta=0.2){
samples <- rexp(n,theta)
result <- exp(lgamma(theta,alpha+n,sum(samples)+beta))
return(result)
}
n <- c(4,8,16,256)
for (i in 1:4){
curve(posterior(theta = x, n = n[i]), from = 0.01, to = 4, add = T, col = i)
}
